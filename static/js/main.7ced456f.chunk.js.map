{"version":3,"sources":["Images.js","Cards.js","Header.js","Props.jsx","Data.js","SlotMachine.js","App.js","serviceWorker.js","index.js"],"names":["Images","props","src","alt","className","Cards","mysrc","cardcategory","cardtitle","href","link","target","Header2","Header","Props","name","text","obj","Data","id","SlotMachine","x","y","z","style","textAlign","backgroundColor","width","padding","border","margin","color","fontWeight","App","a","b","div","toFixed","add","map","curtVal","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qOAMeA,G,UAJF,SAACC,GACV,OAAO,yBAAKC,IAAKD,EAAMC,IAAKC,IAAI,QAAQC,UAAU,eCiCvCC,MAjCf,SAAeJ,GACX,OACI,oCAeI,yBAAKG,UAAU,SACX,yBAAKA,UAAU,QACX,kBAAC,EAAD,CAAQF,IAAKD,EAAMK,QACnB,yBAAKF,UAAU,aACX,0BAAMA,UAAU,iBAAiBH,EAAMM,cACvC,wBAAIH,UAAU,cAAd,IAA6BH,EAAMO,WACnC,uBAAGC,KAAMR,EAAMS,KAAMC,OAAO,UACxB,mDClB5B,SAASC,IACL,OAAO,+CAQIC,MAff,WACI,OACI,kDCKOC,MARf,SAAeb,GACb,OACE,6BACE,4BAAKA,EAAMc,MACX,4BAAKd,EAAMe,KAAKC,OCWPC,EAjBF,CACT,CACIC,GAAG,EACHb,MAAO,6CACPC,aAAc,4BACdC,UAAW,OACXE,KAAM,8CAEV,CACIS,GAAG,EACHb,MAAO,6CACPC,aAAc,4BACdC,UAAW,OACXE,KAAM,+CCcCU,EAzBK,SAACnB,GAAU,IAInBoB,EAAYpB,EAAZoB,EAAGC,EAASrB,EAATqB,EAAGC,EAAMtB,EAANsB,EAEd,OAAKF,IAAMC,GAAKA,IAAMC,EAEd,yBAAKC,MAAO,CAACC,UAAU,SAASC,gBAAgB,SAASC,MAAM,MAAMC,QAAQ,MAAMC,OAAO,oBAAoBC,OAAO,SACjH,4BAAKT,EAAL,KAAUC,EAAV,KAAeC,GACf,oCAAS,0BAAMC,MAAO,CAAEO,MAAO,YAAaC,WAAY,SAA/C,cAMb,yBAAKR,MAAO,CAACC,UAAU,SAASC,gBAAgB,SAASC,MAAM,MAAMC,QAAQ,MAAMC,OAAO,oBAAoBC,OAAO,SACnH,4BAAKT,EAAL,KAAUC,EAAV,KAAeC,GACb,oCAAS,0BAAMC,MAAO,CAAEO,MAAO,QAAtB,mBCuBVE,MAnCf,WACE,OACE,yBAAK7B,UAAU,OACb,4BACE,4BJVG,qBIWH,4BAAKQ,KACL,4BJDR,SAAasB,EAAEC,GACX,IAAIC,EAAIF,EAAEC,EAEV,OADAC,EAAIC,QAAQ,GACLD,EIFEE,CAAI,GAAI,IACb,4BAAKzB,MAEP,kBAAC,EAAD,MACA,kBAACD,EAAD,MAEA,kBAAC,EAAD,CAAOG,KAAK,SAASC,KAAM,CAAEC,IAAK,oBAEjCC,EAAKqB,KAAI,SAACC,GACT,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAQrB,GACbb,MAAOkC,EAAQlC,MACfC,aAAciC,EAAQjC,aACtBC,UAAWgC,EAAQhC,UACnBE,KAAM8B,EAAQ9B,UAMpB,kBAAC,EAAD,CAAaW,EAAE,eAAKC,EAAE,eAAMC,EAAE,iBAC9B,kBAAC,EAAD,CAAaF,EAAE,eAAKC,EAAE,eAAMC,EAAE,iBAC9B,kBAAC,EAAD,CAAaF,EAAE,eAAKC,EAAE,eAAMC,EAAE,mBCzBhBmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7ced456f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Images=(props)=>{\r\n    return <img src={props.src} alt=\"myPic\" className=\"card_img\" />\r\n}\r\n\r\nexport default Images;","import React from 'react'\r\nimport Images from './Images';\r\n\r\nfunction Cards(props) {\r\n    return (\r\n        <>\r\n            {/* <div style={{border:\"5px solid #ff77f7\"}}>\r\n                <div className=\"card\">\r\n                    <Images img={props.mysrc}  />\r\n                    <div className=\"card_info\">\r\n                        <span className=\"card_category\">{props.cardcategory}</span>\r\n                       <Title title={props.cardtitle}/>\r\n                        <a href={props.link} target=\"_blank\">\r\n                            <button>Watch</button>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n\r\n            <div className=\"cards\">\r\n                <div className=\"card\">\r\n                    <Images src={props.mysrc}/>\r\n                    <div className=\"card_info\">\r\n                        <span className=\"card_category\">{props.cardcategory}</span>\r\n                        <h2 className=\"card_title\"> {props.cardtitle}</h2>\r\n                        <a href={props.link} target=\"_blank\">\r\n                            <button>watch now</button>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Cards;\r\n","import React from 'react';\r\n\r\nconst var1=\"my name is pankaj\"\r\nfunction Header(){\r\n    return(\r\n        <h1>Hi this is header</h1>\r\n    );\r\n}\r\n\r\nfunction Header2(){\r\n    return <h2>This is header2</h2>;\r\n}\r\n\r\nfunction add(a,b){\r\n    let div=a/b;\r\n    div.toFixed(2); //for showing only two digit after decimal\r\n    return div; \r\n}\r\nexport default Header;\r\nexport {var1,Header2,add};","import React from \"react\";\r\n\r\nfunction Props(props) {\r\n  return (\r\n    <div>\r\n      <h4>{props.name}</h4>\r\n      <h4>{props.text.obj}</h4>\r\n    </div>\r\n  );\r\n}\r\nexport default Props;\r\n","const Data = [\r\n    {\r\n        id:1,   \r\n        mysrc: \"https://wallpapercave.com/wp/wp4056410.jpg\",\r\n        cardcategory: \"A Netflix Original series\",\r\n        cardtitle: \"Dark\",\r\n        link: \"https://wallpapercave.com/wp/wp4056410.jpg\"\r\n    },\r\n    {\r\n        id:2,\r\n        mysrc: \"https://wallpapercave.com/wp/wp4056410.jpg\",\r\n        cardcategory: \"A Netflix Original series\",\r\n        cardtitle: \"Dark\",\r\n        link: \"https://wallpapercave.com/wp/wp4056410.jpg\"\r\n    }\r\n]\r\n\r\nexport default Data;","import React from 'react'\r\nconst Result = () => { }\r\nconst SlotMachine = (props) => {\r\n    // let x=props.x;\r\n    // let y=props.y;\r\n    // let z=props.z;\r\n    const { x, y, z } = props\r\n\r\n    if ((x === y && y === z)) {\r\n        return (\r\n            <div style={{textAlign:\"center\",backgroundColor:\"yellow\",width:\"50%\",padding:\"5px\",border:\"5px solid #7af000\",margin:\"auto\"}}>\r\n                <h1>{x}  {y}  {z}</h1>\r\n                <p>It is <span style={{ color: \"darkgreen\", fontWeight: \"bold\" }}>Matching</span></p>\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <div style={{textAlign:\"center\",backgroundColor:\"yellow\",width:\"50%\",padding:\"5px\",border:\"5px solid #7af000\",margin:\"auto\"}}>\r\n              <h1>{x}  {y}  {z}</h1>\r\n                <p>It is <span style={{ color: \"red\" }}>Not-Matching</span></p>\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\nexport default SlotMachine;\r\n","import React from 'react';\nimport './App.css';\nimport Cards from './Cards';\nimport Header, { var1, Header2, add } from './Header';\nimport Props from './Props';\nimport Data from './Data';\nimport SlotMachine from './SlotMachine';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ol>\n        <li>{var1}</li>\n        <li>{Header2()}</li>\n        <li>{add(55, 4)}</li>\n        <li>{Header()}</li>\n      </ol>\n      <Header />\n      <Header2 />\n      {/* --------------------------------- */}\n      <Props name=\"muskan\" text={{ obj: \"parsing object\" }} />\n      {/* -------------------------------- */}\n      {Data.map((curtVal) => {\n        return (\n          <Cards\n            key={curtVal.id}\n            mysrc={curtVal.mysrc}\n            cardcategory={curtVal.cardcategory}\n            cardtitle={curtVal.cardtitle}\n            link={curtVal.link}\n          />\n        );\n      })}\n      {/* -------------------------------------- */}\n\n      <SlotMachine x=\"ðŸ˜„\" y=\"ðŸ˜„\"  z=\"ðŸ¦€\" />\n      <SlotMachine x=\"ðŸ˜„\" y=\"ðŸ˜„\"  z=\"ðŸ˜„\" />\n      <SlotMachine x=\"ðŸ˜„\" y=\"ðŸ˜„\"  z=\"ðŸ˜¢\" />\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}